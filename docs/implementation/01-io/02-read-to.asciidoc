= `read_to`

Write a template function `read_to<T>` that receives

* an input stream `in` of type `std::istream`;
* a pointer `buffer` of type `T*`;
* a value `n` of type `size_t` (which is basically an unsigned integer).
  Its default value is `1`.

`read_to<T>(in, buffer, n)` reads in `n` `T` values from the `in`.
It does this by reading raw bytes from the `istream` and reinterpreting these bytes as a `n` consecutive ``T``s.
An example of how to do this can be found in the link:../../background-information/image-example.asciidoc[background information].

[source,c++]
----
std::ifstream in(filename);

int data;
read_to(in, &data);
----

reads 4 bytes (assuming `int` is 4 bytes long) from `in` and reinterprets these bytes as a single `int`.

`read_to` should check whether it succeeded.
Rely on the ``istream``'s `fail` method for this.
If the read operation failed, simply crash the application by making use of an link:../../background-information/assertions.asciidoc[assertion].
For this project, you can make use of `CHECK`:

[source,c++]
----
#include "logging.h"

void foo()
{
    CHECK(condition) << error_message;
}
----

If `condition` evaluates to `false`, `error_message` is printed and the application is aborted.
The check will be performed both in debug and release build.
Hardly elegant, but good enough for our purposes.
